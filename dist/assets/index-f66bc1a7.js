const G=(t,e)=>{const c=o=>{for(let s=0,{length:i}=o;s<i;s++)r(o[s])},r=({target:o,attributeName:s,oldValue:i})=>{o.attributeChangedCallback(s,i,o.getAttribute(s))};return(o,s)=>{const{observedAttributes:i}=o.constructor;return i&&t(s).then(()=>{new e(c).observe(o,{attributes:!0,attributeOldValue:!0,attributeFilter:i});for(let u=0,{length:h}=i;u<h;u++)o.hasAttribute(i[u])&&r({target:o,attributeName:i[u],oldValue:null})}),o}},{keys:J}=Object,K=t=>{const e=J(t),c=[],r=new Set,{length:o}=e;for(let s=0;s<o;s++){c[s]=t[e[s]];try{delete t[e[s]]}catch{r.add(s)}}return()=>{for(let s=0;s<o;s++)r.has(s)||(t[e[s]]=c[s])}};/*! (c) Andrea Giammarchi - ISC */const y=!0,k=!1,R="querySelectorAll",X=(t,e=document,c=MutationObserver,r=["*"])=>{const o=(u,h,f,d,n,l)=>{for(const a of u)(l||R in a)&&(n?f.has(a)||(f.add(a),d.delete(a),t(a,n)):d.has(a)||(d.add(a),f.delete(a),t(a,n)),l||o(a[R](h),h,f,d,n,y))},s=new c(u=>{if(r.length){const h=r.join(","),f=new Set,d=new Set;for(const{addedNodes:n,removedNodes:l}of u)o(l,h,f,d,k,k),o(n,h,f,d,y,k)}}),{observe:i}=s;return(s.observe=u=>i.call(s,u,{subtree:y,childList:y}))(e),s},m="querySelectorAll",{document:Y,Element:j,MutationObserver:Z,Set:tt,WeakMap:et}=self,C=t=>m in t,{filter:H}=[],x=t=>{const e=new et,c=n=>{for(let l=0,{length:a}=n;l<a;l++)e.delete(n[l])},r=()=>{const n=f.takeRecords();for(let l=0,{length:a}=n;l<a;l++)i(H.call(n[l].removedNodes,C),!1),i(H.call(n[l].addedNodes,C),!0)},o=n=>n.matches||n.webkitMatchesSelector||n.msMatchesSelector,s=(n,l)=>{let a;if(l)for(let g,U=o(n),q=0,{length:z}=u;q<z;q++)U.call(n,g=u[q])&&(e.has(n)||e.set(n,new tt),a=e.get(n),a.has(g)||(a.add(g),t.handle(n,l,g)));else e.has(n)&&(a=e.get(n),e.delete(n),a.forEach(g=>{t.handle(n,l,g)}))},i=(n,l=!0)=>{for(let a=0,{length:g}=n;a<g;a++)s(n[a],l)},{query:u}=t,h=t.root||Y,f=X(s,h,Z,u),{attachShadow:d}=j.prototype;return d&&(j.prototype.attachShadow=function(n){const l=d.call(this,n);return f.observe(l),l}),u.length&&i(h[m](u)),{drop:c,flush:r,observer:f,parse:i}},{customElements:p,document:w,Element:D,MutationObserver:ot,Object:rt,Promise:st,Map:M,Set:nt,WeakMap:ct,Reflect:at}=self,{createElement:F}=w,{define:lt,get:it,upgrade:ut}=p,{construct:ft}=at||{construct(t){return t.call(this)}},{defineProperty:b,getOwnPropertyNames:ht,setPrototypeOf:v}=rt,L=new ct,P=new nt,$=new M,S=new M,I=new M,O=new M,Q=[],E=[],V=t=>O.get(t)||it.call(p,t),dt=(t,e,c)=>{const r=I.get(c);if(e&&!r.isPrototypeOf(t)){const s=K(t);A=v(t,r);try{new r.constructor}finally{A=null,s()}}const o=`${e?"":"dis"}connectedCallback`;o in r&&t[o]()},{parse:_}=x({query:E,handle:dt}),{parse:gt}=x({query:Q,handle(t,e){L.has(t)&&(e?P.add(t):P.delete(t),E.length&&B.call(E,t))}}),{attachShadow:W}=D.prototype;W&&(D.prototype.attachShadow=function(t){const e=W.call(this,t);return L.set(this,e),e});const N=t=>{if(!S.has(t)){let e,c=new st(r=>{e=r});S.set(t,{$:c,_:e})}return S.get(t).$},T=G(N,ot);let A=null;ht(self).filter(t=>/^HTML.*Element$/.test(t)).forEach(t=>{const e=self[t];function c(){const{constructor:r}=this;if(!$.has(r))throw new TypeError("Illegal constructor");const{is:o,tag:s}=$.get(r);if(o){if(A)return T(A,o);const i=F.call(w,s);return i.setAttribute("is",o),T(v(i,r.prototype),o)}else return ft.call(this,e,[],r)}v(c,e),b(c.prototype=e.prototype,"constructor",{value:c}),b(self,t,{value:c})});b(w,"createElement",{configurable:!0,value(t,e){const c=e&&e.is;if(c){const o=O.get(c);if(o&&$.get(o).tag===t)return new o}const r=F.call(w,t);return c&&r.setAttribute("is",c),r}});b(p,"get",{configurable:!0,value:V});b(p,"whenDefined",{configurable:!0,value:N});b(p,"upgrade",{configurable:!0,value(t){const e=t.getAttribute("is");if(e){const c=O.get(e);if(c){T(v(t,c.prototype),e);return}}ut.call(p,t)}});b(p,"define",{configurable:!0,value(t,e,c){if(V(t))throw new Error(`'${t}' has already been defined as a custom element`);let r;const o=c&&c.extends;$.set(e,o?{is:t,tag:o}:{is:"",tag:t}),o?(r=`${o}[is="${t}"]`,I.set(r,e.prototype),O.set(t,e),E.push(r)):(lt.apply(p,arguments),Q.push(r=t)),N(t).then(()=>{o?(_(w.querySelectorAll(r)),P.forEach(B,[r])):gt(w.querySelectorAll(r))}),S.get(t)._(e)}});function B(t){const e=L.get(t);_(e.querySelectorAll(this),t.isConnected)}
